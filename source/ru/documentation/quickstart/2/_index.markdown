Что если вы хотите сказать “Hello” множество раз, без насилования ваших пальцев? Нам нужно определить метод!

``` ruby
    irb (main):010:0> def h
    irb (main):011:1>   puts "Hello World!"
    irb (main):012:1> end
    => nil
```

Код `def h` начинается с определения метода. Он говорит Ruby что, что мы
определяем метод, который называется `h`. Следующая строка является телом
нашего метода, мы уже видили ее раньше: `puts "Hello World"`. И наконец, последняя строка `end` передает Ruby, то, что мы закончили 
определение метода.
Ruby возвращает нам `=> nil`, имея ввиду что он знает, что мы закончили определять метод.

## Инструкция, Повторная жизнь Метода

Теперь давайте попробуем запустить этот метод несколько раз:

``` ruby
    irb (main):013:0> h
    Hello World!
    => nil
    irb (main):014:0> h()
    Hello World!
    => nil
```

Что-ж, это было очень легко, правда? Вызывать метод из Ruby это так же просто как и назначить ему имя в Ruby. Если метод не передает никаких
параметров, это все что вам нужно. Вы конечно, можете добавить скобки, если вам очень прям таки этого хочется, но в 
них нет никакой необходимости.

Но, что же если мы хотим сказать привет только одному человеку, а не всему миру? Просто переопределите `h` добавив `name` как параметр.

``` ruby
    irb (main):015:0> def h (name)
    irb (main):016:1>   puts "Hello #{name}!"
    irb (main):017:1> end
    => nil
    irb (main):018:0> h ("Matz")
    Hello Matz!
    => nil
```

Великолепно, это работает... но давайте разберемся, что же здесь происходит.

## Определение в строку

Что за `#{name}`? Ruby таким образом вставляет интерпретируемый код в строку. Переменная между двух фигурных скобок вставляется в нужном вам месте, далее Ruby преобразовывает значение переменной `name` в `String`.
Как раз этим вы можете воспользоваться для того чтобы быть уверенным, что имя всегда отображается с заглавной буквы.

``` ruby
    irb (main):019:0> def h(name = "World")
    irb (main):020:1>    puts "Hello #{name.capitalize}!"
    irb (main):021:1> end
    => nil
    irb (main):022:0> h "chris"
    Hello Chris!
    => nil
    irb (main):023:0> h
    Hello World!
    => nil
```

Вы можете заметить здесь несколько примеров использования. Первое это то, что мы вызываем метод без скобок. Если код очевидный, их использование необязательно. Другой, то что мы присваиваем параметр `World` по умолчанию. Таким образом, если имя не будет определенно для метода, по умолчанию он воспользуется именем `"World"`. 

## Эволюция в Приветствие

Что если мы хотим сделать настоящее приветствие, которое запомнит ваше имя, и будет приветствовать вякий раз и относится с уважением? Вы должны использовать объекты для этого. Давайте попробуем создать наш первый “Greeter” класс.

``` ruby
    irb (main):024:0> class Greeter
    irb (main):025:1>   def initialize (name = "World")
    irb (main):026:2>     @name = name
    irb (main):027:2>   end
    irb (main):028:1>   def say_hi
    irb (main):029:2>     puts "Hi #{@name}!"
    irb (main):030:2>   end
    irb (main):031:1>   def say_bye
    irb (main):032:2>     puts "Bye #{@name}, come back soon."
    irb (main):033:2>   end
    irb (main):034:1> end
    => nil
```

Новое слово для нас `class`. Данный код определяет новый класс с именем `Greeter` и содержит несколько методов для него. Так же обратите внимание на `@name`. Это экземпляр переменной, которая доступна для всех методов класса. Как вы успели заметить, `say_hi` и `say_bye` ее используют во всю.

Так как же нам привести данный класс в движение? [Cоздание объекта][].

  [Cоздание объекта]: ../3