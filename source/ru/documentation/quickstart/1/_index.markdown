## Вступление

Это маленький Ruby урок который должен занять не больше 20 минут времени. Он предполагает наличие установленного интерпретатора Ruby в системе. Если у вас еще нет Ruby на вашем компьютере [загрузите][] и установите это перед тем как начать.

## Интерактивный Ruby

Ruby идет в комплекте с программой которая отображает результаты интерпретируемого кода в реальном времени. Использование интерактивной консоли как эта, это потрясающий путь к изучению языка.

Запустите IRB
 
* Если вы пользователь **Mac OS X** откройте `Terminal` и наберите `irb` затем нажмите enter.
* Если вы пользователь **Linux**, откройте консоль и наберите `irb` и нажмите enter.
* Если вы пользователь **Windows**, откройте `fxri` из секции Ruby в меню Пуск.

``` ruby
    irb (main):001:0\>
```

Отлично, irb запущен. Что дальше?
Наберите: `Hello World` и нажмите [Enter]:

``` ruby
    irb (main):001:0> "Hello World"
    => "Hello World"
```

## Ruby выполнил это для вас!

Что произошло? Мы написали только что классическую “Hello World” программу? Не совсем. Линейный вывод IRB просто отображает нам результат выражения который она обрабатывала. Для того чтобы написать “Hello World” нам нужно совсем немного:

``` ruby
    irb (main):002:0> puts "Hello World"
    Hello World
    => nil
```

`puts` это базовая команда для вывода чего-либо из Ruby, например как значения объекта или в данном случае объекта класса String. Но тогда, что же 
значит `=> nil`? Как говорилось ранее это последний результат который возвратил нам Ruby. `puts` всегда возвращает `nil`, которое в Ruby является булевым значением `false`.

## Ваш бесплатный калькулятор

Наконец таки, нам достаточно навыков для использования IRB в качестве калькулятора:

``` ruby
    irb (main):003:0> 3+2
    => 5
```

Три плюс два. Достаточно просто правда? Но что же, по поводу три умножить на два? Попробуйте! Это достаточно легко, вы так же можете вернуться к предыдущему выполненному коду, нажав **стрелка-вверх** на клавиатуре, и вернуться строке `3+2`. Если у вас получилось, вы можете воспользоваться стрелкой влево чтобы переместиться к `+` символу, и заменить его на символ `*`.


``` ruby
    irb (main):004:0> 3*2
    => 6
```

Следующим, давайте попробуем вычислить значение три в квадрате:

``` ruby
    irb (main):005:0> 3**2
    => 9
```

В Ruby `**` путь сказать “возведение в степень”. Но что если вы хотите пойти другим путем, и найти квадратный корень?

``` ruby
    irb (main):006:0\> Math.sqrt (9)
    => 3.0
```

Ладно, подождите, что это было? Если вы уже догадались, “это было извлечение квадратного корня девяти”, вы правы. 
Но давайте рассмотрим некоторые вещи, более детально. Для начала, что же такое `Math`?

## Modules, Group Code by Topic

`Math` это встроенный модуль для математических вычислений. Группирует математические методы вычислений под знакомым именем. Например `Math` содержит в себе методы такие как `sin()` и `tan()`, что является методом для “вычисления синуса угла” и “вычисления тангенса угла”.

Следующее это точка. Что она обозначает? Точка это то как индетифицировать передачу сообщения. Какого? В данном случае это `sqrt(9)`, который означает вызов метода `sqrt`, коротко обозначающий “square root” что в переводе является “квадратный корень”, для числового параметра `9`.

Результат этого метода значение `3.0`. Вы должны иметь ввиду, что это не просто `3`. Это потому что чаще всего значение квадратного корня – это не однозначное числовое значение `integer`, по этому, метод всегда возвращает значение с плавающей точкой `float`. 

Что если мы хотим запомнить результат вычислений? Давайте присвоим ей результат в переменную.

``` ruby
    irb (main):007:0> a = 3 ** 2
    => 9
    irb :008:0> b = 4 ** 2
    => 16
    irb (main):009:0> Math.sqrt (a+b)
    => 5.0
```

Видите, как превосходно вместе с калькулятором, мы отошли подальше от
традиционного `Hello World` сообщения с которого мы начали, но давайте более детально 
сфокусируемся на нем...
[Давайте вернемся к ним][].

  [загрузите]: en/downloads/
  [Давайте вернемся к ним]: 2